["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$re-chain.core","~:imports",null,"~:requires",["^ ","~$walk","~$clojure.walk","^:","^:","~$rf","~$re-frame.core","^<","^<"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$reg-chain-named*",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","~:line",151,"~:column",7,"~:end-line",151,"~:end-column",23,"~:arglists",["~#list",["~$quote",["^I",[["~$interceptors","~$&","~$step-fns"]]]]],"~:doc","Same as `reg-chain-named`, but with a vector of interceptors as the first parameter. The interceptors specified\n  will be appended to each event's interceptors.","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",1,"~:max-fixed-arity",1,"~:method-params",[["^I",["^K","^L"]]],"^H",["^I",[["^K","~$&","^L"]]],"~:arglists-meta",["^I",[null]]]],"^5","~$re-chain.core/reg-chain-named*","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^G",23,"^N",["^ ","^O",true,"^P",1,"^Q",1,"^R",[["^I",["^K","^L"]]],"^H",["^I",[["^K","~$&","^L"]]],"^S",["^I",[null]]],"^R",[["^I",["^K","^L"]]],"~:protocol-impl",null,"^P",1,"^S",["^I",[null]],"^E",1,"^O",true,"~:methods",[["^ ","^P",1,"^O",true,"~:tag","~$clj-nil"]],"^D",151,"~:ret-tag","~$any","^F",151,"^Q",1,"~:fn-var",true,"^H",["^I",[["^K","~$&","^L"]]],"^M","Same as `reg-chain-named`, but with a vector of interceptors as the first parameter. The interceptors specified\n  will be appended to each event's interceptors."],"~$step-id",["^ ","^A",null,"^B",["^ ","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^D",14,"^E",7,"^F",14,"^G",14,"^H",["^I",["^J",["^I",[["~$event-id","~$counter"]]]]]],"^5","~$re-chain.core/step-id","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^G",14,"^R",["^I",[["^11","^12"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",14,"^Y",["^4",[null,"~$cljs.core/Keyword","^X"]],"^F",14,"^Q",2,"^[",true,"^H",["^I",["^J",["^I",[["^11","^12"]]]]]],"~$conform-handlers",["^ ","^A",null,"^B",["^ ","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^D",119,"^E",7,"^F",119,"^G",23,"^H",["^I",["^J",["^I",[["~$handlers"]]]]]],"^5","~$re-chain.core/conform-handlers","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^G",23,"^R",["^I",[["^16"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",119,"^Y",["^4",["~$clj","~$cljs.core/IVector"]],"^F",119,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["^16"]]]]]],"~$register-chain-handlers!",["^ ","^A",null,"^B",["^ ","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^D",147,"^E",7,"^F",147,"^G",31,"^H",["^I",["^J",["^I",[["~$instructions","~$user-interceptors"]]]]]],"^5","~$re-chain.core/register-chain-handlers!","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^G",31,"^R",["^I",[["^1;","^1<"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",147,"^Y","^X","^F",147,"^Q",2,"^[",true,"^H",["^I",["^J",["^I",[["^1;","^1<"]]]]]],"~$reg-chain*",["^ ","^A",null,"^B",["^ ","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^D",158,"^E",7,"^F",158,"^G",17,"^H",["^I",["^J",["^I",[["~$id","^K","~$&","^L"]]]]],"^M","Same as `reg-chain`, but with a vector of interceptors as the second parameter. The interceptors specified\n  will be appended to each event's interceptors.","^N",["^ ","^O",true,"^P",2,"^Q",2,"^R",[["^I",["^1?","^K","^L"]]],"^H",["^I",[["^1?","^K","~$&","^L"]]],"^S",["^I",[null]]]],"^5","~$re-chain.core/reg-chain*","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^G",17,"^N",["^ ","^O",true,"^P",2,"^Q",2,"^R",[["^I",["^1?","^K","^L"]]],"^H",["^I",[["^1?","^K","~$&","^L"]]],"^S",["^I",[null]]],"^R",[["^I",["^1?","^K","^L"]]],"^U",null,"^P",2,"^S",["^I",[null]],"^E",1,"^O",true,"^V",[["^ ","^P",2,"^O",true,"^W","^X"]],"^D",158,"^Y","^Z","^F",158,"^Q",2,"^[",true,"^H",["^I",[["^1?","^K","~$&","^L"]]],"^M","Same as `reg-chain`, but with a vector of interceptors as the second parameter. The interceptors specified\n  will be appended to each event's interceptors."],"~$links",["^ ","^5","~$re-chain.core/links","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^D",7,"^E",1,"^F",7,"^G",11,"^B",["^ ","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^D",7,"^E",6,"^F",7,"^G",11],"^W","~$cljs.core/Atom"],"~$select-link",["^ ","^A",null,"^B",["^ ","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^D",58,"^E",7,"^F",58,"^G",18,"^H",["^I",["^J",["^I",[["~$next-event-id","~$effects"]]]]]],"^5","~$re-chain.core/select-link","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^G",18,"^R",["^I",[["^1E","^1F"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",58,"^Y",["^4",["^Z","~$cljs.core/IMap"]],"^F",58,"^Q",2,"^[",true,"^H",["^I",["^J",["^I",[["^1E","^1F"]]]]]],"~$conform-named-handlers",["^ ","^A",null,"^B",["^ ","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^D",91,"^E",7,"^F",91,"^G",29,"^H",["^I",["^J",["^I",[["^16"]]]]]],"^5","~$re-chain.core/conform-named-handlers","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^G",29,"^R",["^I",[["^16"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",91,"^Y",["^4",["^18","^19"]],"^F",91,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["^16"]]]]]],"~$make-event",["^ ","^A",null,"^B",["^ ","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^D",69,"^E",7,"^F",69,"^G",17,"^H",["^I",["^J",["^I",[["^1E","~$previous-event-params",["~$_","~$&","~$params"]]]]]]],"^5","~$re-chain.core/make-event","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^G",17,"^R",["^I",[["^1E","^1L","~$p__4794"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",69,"^Y",["^4",[null,"^18","^Z"]],"^F",69,"^Q",3,"^[",true,"^H",["^I",["^J",["^I",[["^1E","^1L",["~$_","~$&","^1M"]]]]]]],"~$link-effects",["^ ","^A",null,"^B",["^ ","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^D",72,"^E",7,"^F",72,"^G",19,"^H",["^I",["^J",["^I",[["^1E","~$event-params","^1F"]]]]]],"^5","~$re-chain.core/link-effects","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^G",19,"^R",["^I",[["^1E","^1Q","^1F"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",72,"^Y",["^4",[null,"^Z"]],"^F",72,"^Q",3,"^[",true,"^H",["^I",["^J",["^I",[["^1E","^1Q","^1F"]]]]]],"~$configure!",["^ ","^A",null,"^B",["^ ","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^D",165,"^E",7,"^F",165,"^G",17,"^H",["^I",["^J",["^I",[["~$chain-links"]]]]],"^M","re-chain only supports the `dispatch` effect out of the box. To add more effects, call this function at the startup\n  of your app.\n\n  Parameters:\n\n  `chain-links`: Vector of maps. Each map describes how to chain together events using a certain effect. The map should\n  contain 3 keys:\n  - `:effect-present?` : Is the effect present in the effects map returned from an event function?\n  - `:get-dispatch` : Try to lookup the dispatch value from the effects map\n  - `:set-dispatch` : Set the dispatch value in the effects map\n\n  Usage:\n  ```\n  (chain/configure! [{:effect-present? (fn [effects] (:http-xhrio effects))\n                      :get-dispatch    (fn [effects] (get-in effects [:http-xhrio :on-success]))\n                      :set-dispatch    (fn [effects dispatch] (assoc-in effects [:http-xhrio :on-success] dispatch))}])\n  ```\n  "],"^5","~$re-chain.core/configure!","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^G",17,"^R",["^I",[["^1T"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",165,"^Y",["^4",[null,"^Z"]],"^F",165,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["^1T"]]]]],"^M","re-chain only supports the `dispatch` effect out of the box. To add more effects, call this function at the startup\n  of your app.\n\n  Parameters:\n\n  `chain-links`: Vector of maps. Each map describes how to chain together events using a certain effect. The map should\n  contain 3 keys:\n  - `:effect-present?` : Is the effect present in the effects map returned from an event function?\n  - `:get-dispatch` : Try to lookup the dispatch value from the effects map\n  - `:set-dispatch` : Set the dispatch value in the effects map\n\n  Usage:\n  ```\n  (chain/configure! [{:effect-present? (fn [effects] (:http-xhrio effects))\n                      :get-dispatch    (fn [effects] (get-in effects [:http-xhrio :on-success]))\n                      :set-dispatch    (fn [effects dispatch] (assoc-in effects [:http-xhrio :on-success] dispatch))}])\n  ```\n  "],"~$collect-event-instructions",["^ ","^A",null,"^B",["^ ","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^D",133,"^E",7,"^F",133,"^G",33,"^H",["^I",["^J",["^I",[["~$key","^L"]]]]]],"^5","~$re-chain.core/collect-event-instructions","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^G",33,"^R",["^I",[["^1W","^L"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",133,"^Y","^Z","^F",133,"^Q",2,"^[",true,"^H",["^I",["^J",["^I",[["^1W","^L"]]]]]],"~$single-valid-next",["^ ","^A",null,"^B",["^ ","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^D",50,"^E",7,"^F",50,"^G",24,"^H",["^I",["^J",["^I",[["^1E","^1F"]]]]]],"^5","~$re-chain.core/single-valid-next","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^G",24,"^R",["^I",[["^1E","^1F"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",50,"^Y",["^4",["^Z","^X"]],"^F",50,"^Q",2,"^[",true,"^H",["^I",["^J",["^I",[["^1E","^1F"]]]]]],"~$*replace-pointers*",["^ ","^B",["^ ","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^D",5,"^E",16,"^F",5,"^G",34,"~:dynamic",true],"^5","~$re-chain.core/*replace-pointers*","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^G",34,"^E",1,"^20",true,"^D",5,"^F",5,"^W","^Z"],"~$dispatch-empty-or-next",["^ ","^A",null,"^B",["^ ","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^D",41,"^E",7,"^F",41,"^G",29,"^H",["^I",["^J",["^I",[["^1F","^1E"]]]]]],"^5","~$re-chain.core/dispatch-empty-or-next","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^G",29,"^R",["^I",[["^1F","^1E"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",41,"^Y",["^4",["^1H","^X"]],"^F",41,"^Q",2,"^[",true,"^H",["^I",["^J",["^I",[["^1F","^1E"]]]]]],"~$reg-chain-named",["^ ","^A",null,"^B",["^ ","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^D",187,"^E",7,"^F",187,"^G",22,"^H",["^I",["^J",["^I",[["~$&","^16"]]]]],"^M","Same as `reg-chain`, but with manually named event handlers. Useful when you need more meaningful names in your\n  event log.\n\n  Parameters:\n\n  `handlers`: pairs of id and event handler. Optionally with interceptors between id and handler.\n\n  Usage:\n  ```\n  (k/reg-chain-named\n\n    :load-customer-data\n    (fn [ctx [customer-id]]\n      {:http-xhrio {:uri \"...\"}})\n\n    :receive-customer-data\n     (fn [ctx [customer-id customer-data]]\n      (assoc-in ctx [:db :customers customer-id] customer-data)))\n  ```","^N",["^ ","^O",true,"^P",0,"^Q",0,"^R",[["^I",["^16"]]],"^H",["^I",[["~$&","^16"]]],"^S",["^I",[null]]]],"^5","~$re-chain.core/reg-chain-named","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^G",22,"^N",["^ ","^O",true,"^P",0,"^Q",0,"^R",[["^I",["^16"]]],"^H",["^I",[["~$&","^16"]]],"^S",["^I",[null]]],"^R",[["^I",["^16"]]],"^U",null,"^P",0,"^S",["^I",[null]],"^E",1,"^O",true,"^V",[["^ ","^P",0,"^O",true,"^W","^Z"]],"^D",187,"^Y","^Z","^F",187,"^Q",0,"^[",true,"^H",["^I",[["~$&","^16"]]],"^M","Same as `reg-chain`, but with manually named event handlers. Useful when you need more meaningful names in your\n  event log.\n\n  Parameters:\n\n  `handlers`: pairs of id and event handler. Optionally with interceptors between id and handler.\n\n  Usage:\n  ```\n  (k/reg-chain-named\n\n    :load-customer-data\n    (fn [ctx [customer-id]]\n      {:http-xhrio {:uri \"...\"}})\n\n    :receive-customer-data\n     (fn [ctx [customer-id customer-data]]\n      (assoc-in ctx [:db :customers customer-id] customer-data)))\n  ```"],"~$seqify",["^ ","^A",null,"^B",["^ ","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^D",9,"^E",7,"^F",9,"^G",13,"^H",["^I",["^J",["^I",[["~$x"]]]]]],"^5","~$re-chain.core/seqify","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^G",13,"^R",["^I",[["~$x"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",9,"^Y",["^4",[null,"^19"]],"^F",9,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["~$x"]]]]]],"~$effect-postprocessor",["^ ","^A",null,"^B",["^ ","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^D",79,"^E",7,"^F",79,"^G",27,"^H",["^I",["^J",["^I",[["^1E"]]]]]],"^5","~$re-chain.core/effect-postprocessor","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^G",27,"^R",["^I",[["^1E"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",79,"^Y","~$function","^F",79,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["^1E"]]]]]],"~$replace-pointers",["^ ","^A",null,"^B",["^ ","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^D",23,"^E",7,"^F",23,"^G",23,"^H",["^I",["^J",["^I",[["~$next-event","^1F"]]]]]],"^5","~$re-chain.core/replace-pointers","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^G",23,"^R",["^I",[["^2<","^1F"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",23,"^Y","^Z","^F",23,"^Q",2,"^[",true,"^H",["^I",["^J",["^I",[["^2<","^1F"]]]]]],"~$reg-chain",["^ ","^A",null,"^B",["^ ","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^D",210,"^E",7,"^F",210,"^G",16,"^H",["^I",["^J",["^I",[["^1?","~$&","^16"]]]]],"^M","Register a list of re-frame fx handlers, chained together.\n\n  The chaining is done through dispatch inference. https://github.com/Day8/re-frame-http-fx is supported by default,\n  you can easily add your own like this: https://github.com/ingesolvoll/kee-frame#configuring-chains-since-020.\n\n  Each handler's event vector is prepended with accumulated event vectors of previous handlers. So if the first handler\n  receives [a b], and the second handler normally would receive [c], it will actually receive [a b c]. The purpose is\n  to make all context available to the entire chain, without a complex framework or crazy scope tricks.\n\n  Parameters:\n\n  `id`: the id of the first re-frame event. The next events in the chain will get the same id followed by an index, so\n  if your id is `add-todo`, the next one in chain will be called `add-todo-1`.\n\n  `handlers`: re-frame event handler functions, registered with `re-frame.core/reg-event-fx`. Interceptors can be\n              specified before the handler, same as with normal event handlers.\n\n\n  Usage:\n  ```\n  (k/reg-chain\n    :load-customer-data\n\n    (fn {ctx [customer-id]]\n      {:http-xhrio {:uri    (str \"/customer/\" customer-id)\n                    :method :get}})\n\n    (fn [cxt [customer-id customer-data]\n      (assoc-in ctx [:db :customers customer-id] customer-data)))\n  ```","^N",["^ ","^O",true,"^P",1,"^Q",1,"^R",[["^I",["^1?","^16"]]],"^H",["^I",[["^1?","~$&","^16"]]],"^S",["^I",[null]]]],"^5","~$re-chain.core/reg-chain","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^G",16,"^N",["^ ","^O",true,"^P",1,"^Q",1,"^R",[["^I",["^1?","^16"]]],"^H",["^I",[["^1?","~$&","^16"]]],"^S",["^I",[null]]],"^R",[["^I",["^1?","^16"]]],"^U",null,"^P",1,"^S",["^I",[null]],"^E",1,"^O",true,"^V",[["^ ","^P",1,"^O",true,"^W","^Z"]],"^D",210,"^Y","^Z","^F",210,"^Q",1,"^[",true,"^H",["^I",[["^1?","~$&","^16"]]],"^M","Register a list of re-frame fx handlers, chained together.\n\n  The chaining is done through dispatch inference. https://github.com/Day8/re-frame-http-fx is supported by default,\n  you can easily add your own like this: https://github.com/ingesolvoll/kee-frame#configuring-chains-since-020.\n\n  Each handler's event vector is prepended with accumulated event vectors of previous handlers. So if the first handler\n  receives [a b], and the second handler normally would receive [c], it will actually receive [a b c]. The purpose is\n  to make all context available to the entire chain, without a complex framework or crazy scope tricks.\n\n  Parameters:\n\n  `id`: the id of the first re-frame event. The next events in the chain will get the same id followed by an index, so\n  if your id is `add-todo`, the next one in chain will be called `add-todo-1`.\n\n  `handlers`: re-frame event handler functions, registered with `re-frame.core/reg-event-fx`. Interceptors can be\n              specified before the handler, same as with normal event handlers.\n\n\n  Usage:\n  ```\n  (k/reg-chain\n    :load-customer-data\n\n    (fn {ctx [customer-id]]\n      {:http-xhrio {:uri    (str \"/customer/\" customer-id)\n                    :method :get}})\n\n    (fn [cxt [customer-id customer-data]\n      (assoc-in ctx [:db :customers customer-id] customer-data)))\n  ```"],"~$single-valid-link",["^ ","^A",null,"^B",["^ ","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^D",33,"^E",7,"^F",33,"^G",24,"^H",["^I",["^J",["^I",[["^1F"]]]]]],"^5","~$re-chain.core/single-valid-link","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^G",24,"^R",["^I",[["^1F"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",33,"^Y",["^4",["^Z","^X"]],"^F",33,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["^1F"]]]]]],"~$chain-interceptor",["^ ","^A",null,"^B",["^ ","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^D",86,"^E",7,"^F",86,"^G",24,"^H",["^I",["^J",["^I",[["~$current-event-id","^1E"]]]]]],"^5","~$re-chain.core/chain-interceptor","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^G",24,"^R",["^I",[["^2C","^1E"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",86,"^Y","^Z","^F",86,"^Q",2,"^[",true,"^H",["^I",["^J",["^I",[["^2C","^1E"]]]]]],"~$collect-named-event-instructions",["^ ","^A",null,"^B",["^ ","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^D",108,"^E",7,"^F",108,"^G",39,"^H",["^I",["^J",["^I",[["^L"]]]]]],"^5","~$re-chain.core/collect-named-event-instructions","^C","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DB634AA\\re_chain\\core.cljc","^G",39,"^R",["^I",[["^L"]]],"^U",null,"^S",["^I",[null,null]],"^E",1,"^O",false,"^D",108,"^Y","~$cljs.core/LazySeq","^F",108,"^Q",1,"^[",true,"^H",["^I",["^J",["^I",[["^L"]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:fn","~:interceptor","~:effect-present?","~:event-handler","~:next-id","~:warn","~:set-dispatch","~:dispatch","~:kee-frame.core/next","~:chain/next","~:event","~:after","~:id","~:effects","~:interceptors","~:handler","~:links","~:get-dispatch"]],"~:order",["^2T","^2Q","^2U","^31","^2N","^2S","^2R","^2P","^30","^2V","^2Y","^2X","^2W","^2L","^2Z","^2[","^2O","^2M"]],"^M",null,"~:as-aliases",["^ "]]