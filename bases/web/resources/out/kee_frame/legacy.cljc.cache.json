["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$kee-frame.legacy","~:imports",null,"~:requires",["^ ","~$event-logger","~$kee-frame.event-logger","^:","^:","~$chain","~$re-chain.core","^<","^<","~$rf","~$re-frame.core","^>","^>"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$console","^>"],"~:defs",["^ ","~$kee-frame-interceptors",["^ ","^5","~$kee-frame.legacy/kee-frame-interceptors","~:file","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\FEEE41D\\kee_frame\\legacy.cljc","~:line",7,"~:column",1,"~:end-line",7,"~:end-column",28,"~:meta",["^ ","^E","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\FEEE41D\\kee_frame\\legacy.cljc","^F",7,"^G",6,"^H",7,"^I",28],"~:tag","~$cljs.core/IVector"],"~$reg-warn",["^ ","~:protocol-inline",null,"^J",["^ ","^E","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\FEEE41D\\kee_frame\\legacy.cljc","^F",9,"^G",8,"^H",9,"^I",16,"~:private",true,"~:arglists",["~#list",["~$quote",["^Q",[["~$id"]]]]]],"^O",true,"^5","~$kee-frame.legacy/reg-warn","^E","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\FEEE41D\\kee_frame\\legacy.cljc","^I",16,"~:method-params",["^Q",[["^S"]]],"~:protocol-impl",null,"~:arglists-meta",["^Q",[null,null]],"^G",1,"~:variadic?",false,"^F",9,"~:ret-tag","~$clj-nil","^H",9,"~:max-fixed-arity",1,"~:fn-var",true,"^P",["^Q",["^R",["^Q",[["^S"]]]]]],"~$reg-event-fx",["^ ","^N",null,"^J",["^ ","^E","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\FEEE41D\\kee_frame\\legacy.cljc","^F",14,"^G",7,"^H",14,"^I",19,"^P",["^Q",["^R",["^Q",[["^S","~$handler"],["^S","~$interceptors","^12"]]]]],"~:doc","Exactly same signature as `re-frame.core/reg-event-fx`. Use this version if you want kee-frame logging and spec validation.\n\n  `re-frame.core/trim-v` interceptor is also applied.","~:top-fn",["^ ","^X",false,"~:fixed-arity",3,"^[",3,"^U",[["^S","^12"],["^S","^13","^12"]],"^P",["^Q",[["^S","^12"],["^S","^13","^12"]]],"^W",["^Q",[null,null]]]],"^5","~$kee-frame.legacy/reg-event-fx","^E","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\FEEE41D\\kee_frame\\legacy.cljc","^I",19,"^15",["^ ","^X",false,"^16",3,"^[",3,"^U",[["^S","^12"],["^S","^13","^12"]],"^P",["^Q",[["^S","^12"],["^S","^13","^12"]]],"^W",["^Q",[null,null]]],"^U",[["^S","^12"],["^S","^13","^12"]],"^V",null,"^16",3,"^W",["^Q",[null,null]],"^G",1,"^X",false,"~:methods",[["^ ","^16",2,"^X",false,"^K","~$any"],["^ ","^16",3,"^X",false,"^K","^19"]],"^F",14,"^H",14,"^[",3,"^10",true,"^P",["^Q",[["^S","^12"],["^S","^13","^12"]]],"^14","Exactly same signature as `re-frame.core/reg-event-fx`. Use this version if you want kee-frame logging and spec validation.\n\n  `re-frame.core/trim-v` interceptor is also applied."],"~$reg-event-db",["^ ","^N",null,"^J",["^ ","^E","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\FEEE41D\\kee_frame\\legacy.cljc","^F",23,"^G",7,"^H",23,"^I",19,"^P",["^Q",["^R",["^Q",[["^S","^12"],["^S","^13","^12"]]]]],"^14","Exactly same signature as `re-frame.core/reg-event-db`. Use this version if you want kee-frame logging and spec validation.\n\n  `re-frame.core/trim-v` interceptor is also applied.","^15",["^ ","^X",false,"^16",3,"^[",3,"^U",[["^S","^12"],["^S","^13","^12"]],"^P",["^Q",[["^S","^12"],["^S","^13","^12"]]],"^W",["^Q",[null,null]]]],"^5","~$kee-frame.legacy/reg-event-db","^E","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\FEEE41D\\kee_frame\\legacy.cljc","^I",19,"^15",["^ ","^X",false,"^16",3,"^[",3,"^U",[["^S","^12"],["^S","^13","^12"]],"^P",["^Q",[["^S","^12"],["^S","^13","^12"]]],"^W",["^Q",[null,null]]],"^U",[["^S","^12"],["^S","^13","^12"]],"^V",null,"^16",3,"^W",["^Q",[null,null]],"^G",1,"^X",false,"^18",[["^ ","^16",2,"^X",false,"^K","^19"],["^ ","^16",3,"^X",false,"^K","^19"]],"^F",23,"^H",23,"^[",3,"^10",true,"^P",["^Q",[["^S","^12"],["^S","^13","^12"]]],"^14","Exactly same signature as `re-frame.core/reg-event-db`. Use this version if you want kee-frame logging and spec validation.\n\n  `re-frame.core/trim-v` interceptor is also applied."],"~$reg-chain",["^ ","^N",null,"^J",["^ ","^E","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\FEEE41D\\kee_frame\\legacy.cljc","^F",32,"^G",7,"^H",32,"^I",16,"^P",["^Q",["^R",["^Q",[["^S","~$&","~$handlers"]]]]],"^14","Register a list of re-frame fx handlers, chained together.\n\n  The chaining is done through dispatch inference. https://github.com/Day8/re-frame-http-fx is supported by default,\n  you can easily add your own like this: https://github.com/ingesolvoll/kee-frame#configuring-chains-since-020.\n\n  Each handler's event vector is prepended with accumulated event vectors of previous handlers. So if the first handler\n  receives [a b], and the second handler normally would receive [c], it will actually receive [a b c]. The purpose is\n  to make all context available to the entire chain, without a complex framework or crazy scope tricks.\n\n  Parameters:\n\n  `id`: the id of the first re-frame event. The next events in the chain will get the same id followed by an index, so\n  if your id is `add-todo`, the next one in chain will be called `add-todo-1`.\n\n  `handlers`: re-frame event handler functions, registered with `kee-frame.core/reg-event-fx`.\n\n\n  Usage:\n  ```\n  (k/reg-chain\n    :load-customer-data\n\n    (fn [ctx [customer-id]]\n      {:http-xhrio {:uri    (str \"/customer/\" customer-id)\n                    :method :get}})\n\n    (fn [cxt [customer-id customer-data]\n      (assoc-in ctx [:db :customers customer-id] customer-data)))\n  ```","^15",["^ ","^X",true,"^16",1,"^[",1,"^U",[["^Q",["^S","^1="]]],"^P",["^Q",[["^S","~$&","^1="]]],"^W",["^Q",[null]]]],"^5","~$kee-frame.legacy/reg-chain","^E","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\FEEE41D\\kee_frame\\legacy.cljc","^I",16,"^15",["^ ","^X",true,"^16",1,"^[",1,"^U",[["^Q",["^S","^1="]]],"^P",["^Q",[["^S","~$&","^1="]]],"^W",["^Q",[null]]],"^U",[["^Q",["^S","^1="]]],"^V",null,"^16",1,"^W",["^Q",[null]],"^G",1,"^X",true,"^18",[["^ ","^16",1,"^X",true,"^K","^19"]],"^F",32,"^Y","^19","^H",32,"^[",1,"^10",true,"^P",["^Q",[["^S","~$&","^1="]]],"^14","Register a list of re-frame fx handlers, chained together.\n\n  The chaining is done through dispatch inference. https://github.com/Day8/re-frame-http-fx is supported by default,\n  you can easily add your own like this: https://github.com/ingesolvoll/kee-frame#configuring-chains-since-020.\n\n  Each handler's event vector is prepended with accumulated event vectors of previous handlers. So if the first handler\n  receives [a b], and the second handler normally would receive [c], it will actually receive [a b c]. The purpose is\n  to make all context available to the entire chain, without a complex framework or crazy scope tricks.\n\n  Parameters:\n\n  `id`: the id of the first re-frame event. The next events in the chain will get the same id followed by an index, so\n  if your id is `add-todo`, the next one in chain will be called `add-todo-1`.\n\n  `handlers`: re-frame event handler functions, registered with `kee-frame.core/reg-event-fx`.\n\n\n  Usage:\n  ```\n  (k/reg-chain\n    :load-customer-data\n\n    (fn [ctx [customer-id]]\n      {:http-xhrio {:uri    (str \"/customer/\" customer-id)\n                    :method :get}})\n\n    (fn [cxt [customer-id customer-data]\n      (assoc-in ctx [:db :customers customer-id] customer-data)))\n  ```"],"~$reg-chain-named",["^ ","^N",null,"^J",["^ ","^E","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\FEEE41D\\kee_frame\\legacy.cljc","^F",66,"^G",7,"^H",66,"^I",22,"^P",["^Q",["^R",["^Q",[["~$&","^1="]]]]],"^14","Same as `reg-chain`, but with manually named event handlers. Useful when you need more meaningful names in your\n  event log.\n\n  Parameters:\n\n  `handlers`: pairs of id and event handler.\n\n  Usage:\n  ```\n  (k/reg-chain-named\n\n    :load-customer-data\n    (fn [ctx [customer-id]]\n      {:http-xhrio {:uri \"...\"}})\n\n    :receive-customer-data\n     (fn [ctx [customer-id customer-data]]\n      (assoc-in ctx [:db :customers customer-id] customer-data)))\n  ```","^15",["^ ","^X",true,"^16",0,"^[",0,"^U",[["^Q",["^1="]]],"^P",["^Q",[["~$&","^1="]]],"^W",["^Q",[null]]]],"^5","~$kee-frame.legacy/reg-chain-named","^E","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\FEEE41D\\kee_frame\\legacy.cljc","^I",22,"^15",["^ ","^X",true,"^16",0,"^[",0,"^U",[["^Q",["^1="]]],"^P",["^Q",[["~$&","^1="]]],"^W",["^Q",[null]]],"^U",[["^Q",["^1="]]],"^V",null,"^16",0,"^W",["^Q",[null]],"^G",1,"^X",true,"^18",[["^ ","^16",0,"^X",true,"^K","^19"]],"^F",66,"^Y","^19","^H",66,"^[",0,"^10",true,"^P",["^Q",[["~$&","^1="]]],"^14","Same as `reg-chain`, but with manually named event handlers. Useful when you need more meaningful names in your\n  event log.\n\n  Parameters:\n\n  `handlers`: pairs of id and event handler.\n\n  Usage:\n  ```\n  (k/reg-chain-named\n\n    :load-customer-data\n    (fn [ctx [customer-id]]\n      {:http-xhrio {:uri \"...\"}})\n\n    :receive-customer-data\n     (fn [ctx [customer-id customer-data]]\n      (assoc-in ctx [:db :customers customer-id] customer-data)))\n  ```"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"^14",null,"~:as-aliases",["^ "]]