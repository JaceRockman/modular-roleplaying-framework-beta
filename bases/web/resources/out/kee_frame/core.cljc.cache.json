["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$kee-frame.core","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^9","~$legacy","~$kee-frame.legacy","~$clojure.spec.alpha","~$cljs.spec.alpha","~$log","~$kee-frame.log","^?","^?","~$kee-frame.state","^@","~$expound.alpha","^A","~$rf","~$re-frame.core","~$router","~$kee-frame.router","^E","^E","~$state","^@","~$e","^A","~$s","^=","~$spec","~$kee-frame.spec","^H","^H","~$interop","^9","^;","^;","^=","^=","^C","^C"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$console","^C"],"~:defs",["^ ","~$switch-route",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DFB122E\\kee_frame\\core.cljc","~:line",138,"~:column",7,"~:end-line",138,"~:end-column",19,"~:arglists",["~#list",["~$quote",["^W",[["~$f","~$&","~$pairs"]]]]],"~:doc","DEPRECATED in favor of case-route\n\n  Reagent component that renders different components for different routes.\n\n  You might need to include a case for `nil`, since there are no route data before the first navigation.\n\n  Parameters:\n\n  `f`: A function that receives the route data on every route change, and returns the value to dispatch on.\n\n  `pairs`: A pair consists of the dispatch value and the reagent component to dispatch to.\n\n  Returns the first component with a matching dispatch value.\n\n  Usage:\n  ```\n  [k/switch-route (fn [route] (:handler route))\n    :index [:div \"This is index page\"]\n    :about [:div \"This is the about page\"]\n    nil    [:div \"Probably also the index page\"]]\n  ```","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",1,"~:max-fixed-arity",1,"~:method-params",[["^W",["~$f","^Y"]]],"^V",["^W",[["~$f","~$&","^Y"]]],"~:arglists-meta",["^W",[null]]]],"^5","~$kee-frame.core/switch-route","^Q","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DFB122E\\kee_frame\\core.cljc","^U",19,"^[",["^ ","^10",true,"^11",1,"^12",1,"^13",[["^W",["~$f","^Y"]]],"^V",["^W",[["~$f","~$&","^Y"]]],"^14",["^W",[null]]],"^13",[["^W",["~$f","^Y"]]],"~:protocol-impl",null,"^11",1,"^14",["^W",[null]],"^S",1,"^10",true,"~:methods",[["^ ","^11",1,"^10",true,"~:tag","~$any"]],"^R",138,"~:ret-tag","^19","^T",138,"^12",1,"~:fn-var",true,"^V",["^W",[["~$f","~$&","^Y"]]],"^Z","DEPRECATED in favor of case-route\n\n  Reagent component that renders different components for different routes.\n\n  You might need to include a case for `nil`, since there are no route data before the first navigation.\n\n  Parameters:\n\n  `f`: A function that receives the route data on every route change, and returns the value to dispatch on.\n\n  `pairs`: A pair consists of the dispatch value and the reagent component to dispatch to.\n\n  Returns the first component with a matching dispatch value.\n\n  Usage:\n  ```\n  [k/switch-route (fn [route] (:handler route))\n    :index [:div \"This is index page\"]\n    :about [:div \"This is the about page\"]\n    nil    [:div \"Probably also the index page\"]]\n  ```"],"~$start!",["^ ","^O",null,"^P",["^ ","^Q","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DFB122E\\kee_frame\\core.cljc","^R",23,"^S",7,"^T",23,"^U",13,"^V",["^W",["^X",["^W",[["~$options"]]]]],"^Z","Starts your client application with the specified `options`.\n\n  This function is intentionally forgiving in certain ways:\n  - You can call it as often as you want. Figwheel should call it on each code change\n  - You can omit the `options` altogether. kee-frame chooses sensible defaults for you and leads the way.\n\n  Usage:\n  ```\n  (k/start! {:debug?         true\n             :routes         my-reitit-routes\n             :hash-routing?  true\n             :initial-db     {:some-property \"default value\"}\n             :root-component [my-reagent-root-component]\n             :app-db-spec    :spec/my-db-spec})\n  ```"],"^5","~$kee-frame.core/start!","^Q","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DFB122E\\kee_frame\\core.cljc","^U",13,"^13",["^W",[["^1="]]],"^16",null,"^14",["^W",[null,null]],"^S",1,"^10",false,"^R",23,"^1:",["^4",["^19","~$clj-nil"]],"^T",23,"^12",1,"^1;",true,"^V",["^W",["^X",["^W",[["^1="]]]]],"^Z","Starts your client application with the specified `options`.\n\n  This function is intentionally forgiving in certain ways:\n  - You can call it as often as you want. Figwheel should call it on each code change\n  - You can omit the `options` altogether. kee-frame chooses sensible defaults for you and leads the way.\n\n  Usage:\n  ```\n  (k/start! {:debug?         true\n             :routes         my-reitit-routes\n             :hash-routing?  true\n             :initial-db     {:some-property \"default value\"}\n             :root-component [my-reagent-root-component]\n             :app-db-spec    :spec/my-db-spec})\n  ```"],"~$reg-controller",["^ ","^O",null,"^P",["^ ","^Q","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DFB122E\\kee_frame\\core.cljc","^R",67,"^S",7,"^T",67,"^U",21,"^V",["^W",["^X",["^W",[["~$id","~$controller"]]]]],"^Z","Put a controller config map into the global controller registry.\n\n  Parameters:\n\n  `id`: Must be unique in controllere registry. Will appear in logs.\n\n  `controller`: A map with the following keys:\n  - `:params`: A function that receives the route data and returns the part that should be sent to the `start` function. A nil\n  return means that the controller should not run for this route.\n\n  - `:start`: A function or an event vector. Called when `params` returns a non-nil value different from the previous\n  invocation. The function receives whatever non-nil value that was returned from `params`,\n  and returns a re-frame event vector. If the function does nothing but returning the vector, the surrounding function\n  can be omitted.\n\n  - `:stop`: Optional. A function or an event vector. Called when previous invocation of `params` returned non-nil and the\n  current invocation returned nil. If the function does nothing but returning the vector, the surrounding function\n  can be omitted."],"^5","~$kee-frame.core/reg-controller","^Q","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DFB122E\\kee_frame\\core.cljc","^U",21,"^13",["^W",[["^1A","^1B"]]],"^16",null,"^14",["^W",[null,null]],"^S",1,"^10",false,"^R",67,"^1:",["^4",[null,"^19"]],"^T",67,"^12",2,"^1;",true,"^V",["^W",["^X",["^W",[["^1A","^1B"]]]]],"^Z","Put a controller config map into the global controller registry.\n\n  Parameters:\n\n  `id`: Must be unique in controllere registry. Will appear in logs.\n\n  `controller`: A map with the following keys:\n  - `:params`: A function that receives the route data and returns the part that should be sent to the `start` function. A nil\n  return means that the controller should not run for this route.\n\n  - `:start`: A function or an event vector. Called when `params` returns a non-nil value different from the previous\n  invocation. The function receives whatever non-nil value that was returned from `params`,\n  and returns a re-frame event vector. If the function does nothing but returning the vector, the surrounding function\n  can be omitted.\n\n  - `:stop`: Optional. A function or an event vector. Called when previous invocation of `params` returned non-nil and the\n  current invocation returned nil. If the function does nothing but returning the vector, the surrounding function\n  can be omitted."],"~$reg-event-db",["^ ","^5","~$kee-frame.core/reg-event-db","^Q","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DFB122E\\kee_frame\\core.cljc","^R",54,"^S",1,"^T",54,"^U",18,"^P",["^ ","^Q","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DFB122E\\kee_frame\\core.cljc","^R",54,"^S",6,"^T",54,"^U",18]],"~$valid-option-key?",["^ ","^5","~$kee-frame.core/valid-option-key?","^Q","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DFB122E\\kee_frame\\core.cljc","^R",12,"^S",1,"^T",12,"^U",23,"^P",["^ ","^Q","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DFB122E\\kee_frame\\core.cljc","^R",12,"^S",6,"^T",12,"^U",23],"^18","~$cljs.core/ISet"],"~$extra-options",["^ ","^O",null,"^P",["^ ","^Q","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DFB122E\\kee_frame\\core.cljc","^R",16,"^S",7,"^T",16,"^U",20,"^V",["^W",["^X",["^W",[["^1="]]]]],"^Z","Complete listing of invalid options sent to the `start!` function."],"^5","~$kee-frame.core/extra-options","^Q","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DFB122E\\kee_frame\\core.cljc","^U",20,"^13",["^W",[["^1="]]],"^16",null,"^14",["^W",[null,null]],"^S",1,"^10",false,"^R",16,"^1:",["^4",[null,"~$clj","^19"]],"^T",16,"^12",1,"^1;",true,"^V",["^W",["^X",["^W",[["^1="]]]]],"^Z","Complete listing of invalid options sent to the `start!` function."],"~$reg-chain-named",["^ ","^5","~$kee-frame.core/reg-chain-named","^Q","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DFB122E\\kee_frame\\core.cljc","^R",51,"^S",1,"^T",51,"^U",21,"^P",["^ ","^Q","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DFB122E\\kee_frame\\core.cljc","^R",51,"^S",6,"^T",51,"^U",21]],"~$path-for",["^ ","^O",null,"^P",["^ ","^Q","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DFB122E\\kee_frame\\core.cljc","^R",99,"^S",7,"^T",99,"^U",15,"^V",["^W",["^X",["^W",[["~$handler","~$&","~$params"]]]]],"^Z","Make a uri from route data. Useful for avoiding hard coded links in your app.\n\n  Parameters:\n\n  `handler`: The reitit handler from route data\n\n  `params`: Reitit route params for the requested route\n\n  Usage: `[:a {:href (k/path-for [:orders :sort-by :date]} \"Orders sorted by date\"]`","^[",["^ ","^10",true,"^11",1,"^12",1,"^13",[["^W",["^1O","^1P"]]],"^V",["^W",[["^1O","~$&","^1P"]]],"^14",["^W",[null]]]],"^5","~$kee-frame.core/path-for","^Q","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DFB122E\\kee_frame\\core.cljc","^U",15,"^[",["^ ","^10",true,"^11",1,"^12",1,"^13",[["^W",["^1O","^1P"]]],"^V",["^W",[["^1O","~$&","^1P"]]],"^14",["^W",[null]]],"^13",[["^W",["^1O","^1P"]]],"^16",null,"^11",1,"^14",["^W",[null]],"^S",1,"^10",true,"^17",[["^ ","^11",1,"^10",true,"^18","^19"]],"^R",99,"^1:","^19","^T",99,"^12",1,"^1;",true,"^V",["^W",[["^1O","~$&","^1P"]]],"^Z","Make a uri from route data. Useful for avoiding hard coded links in your app.\n\n  Parameters:\n\n  `handler`: The reitit handler from route data\n\n  `params`: Reitit route params for the requested route\n\n  Usage: `[:a {:href (k/path-for [:orders :sort-by :date]} \"Orders sorted by date\"]`"],"~$-replace-controller",["^ ","^O",null,"^P",["^ ","^Q","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DFB122E\\kee_frame\\core.cljc","^R",56,"^S",7,"^T",56,"^U",26,"^V",["^W",["^X",["^W",[["~$controllers","^1B"]]]]]],"^5","~$kee-frame.core/-replace-controller","^Q","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DFB122E\\kee_frame\\core.cljc","^U",26,"^13",["^W",[["^1S","^1B"]]],"^16",null,"^14",["^W",[null,null]],"^S",1,"^10",false,"^R",56,"^1:",["^4",[null,"^19"]],"^T",56,"^12",2,"^1;",true,"^V",["^W",["^X",["^W",[["^1S","^1B"]]]]]],"~$case-route",["^ ","^O",null,"^P",["^ ","^Q","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DFB122E\\kee_frame\\core.cljc","^R",112,"^S",7,"^T",112,"^U",17,"^V",["^W",["^X",["^W",[["~$f","~$&","^Y"]]]]],"^Z","Reagent component that renders different components for different routes.\n\n  Semantics similar to clojure.core/case\n\n  You can include a single default component at the end that serves as the default view\n\n  Parameters:\n\n  `f`: A function that receives the route data on every route change, and returns the value to dispatch on.\n\n  `pairs`: A pair consists of the dispatch value and the reagent component to dispatch to. An optional single default\n  component can be added at the end.\n\n  Returns the first component with a matching dispatch value.\n\n  Usage:\n  ```\n  [k/switch-route (fn [route] (:handler route))\n    :index [:div \"This is index page\"]\n    :about [:div \"This is the about page\"]\n    [:div \"Probably also the index page\"]]\n  ```","^[",["^ ","^10",true,"^11",1,"^12",1,"^13",[["^W",["~$f","^Y"]]],"^V",["^W",[["~$f","~$&","^Y"]]],"^14",["^W",[null]]]],"^5","~$kee-frame.core/case-route","^Q","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DFB122E\\kee_frame\\core.cljc","^U",17,"^[",["^ ","^10",true,"^11",1,"^12",1,"^13",[["^W",["~$f","^Y"]]],"^V",["^W",[["~$f","~$&","^Y"]]],"^14",["^W",[null]]],"^13",[["^W",["~$f","^Y"]]],"^16",null,"^11",1,"^14",["^W",[null]],"^S",1,"^10",true,"^17",[["^ ","^11",1,"^10",true,"^18","^19"]],"^R",112,"^1:","^19","^T",112,"^12",1,"^1;",true,"^V",["^W",[["~$f","~$&","^Y"]]],"^Z","Reagent component that renders different components for different routes.\n\n  Semantics similar to clojure.core/case\n\n  You can include a single default component at the end that serves as the default view\n\n  Parameters:\n\n  `f`: A function that receives the route data on every route change, and returns the value to dispatch on.\n\n  `pairs`: A pair consists of the dispatch value and the reagent component to dispatch to. An optional single default\n  component can be added at the end.\n\n  Returns the first component with a matching dispatch value.\n\n  Usage:\n  ```\n  [k/switch-route (fn [route] (:handler route))\n    :index [:div \"This is index page\"]\n    :about [:div \"This is the about page\"]\n    [:div \"Probably also the index page\"]]\n  ```"],"~$reg-chain",["^ ","^5","~$kee-frame.core/reg-chain","^Q","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DFB122E\\kee_frame\\core.cljc","^R",49,"^S",1,"^T",49,"^U",15,"^P",["^ ","^Q","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DFB122E\\kee_frame\\core.cljc","^R",49,"^S",6,"^T",49,"^U",15]],"~$reg-event-fx",["^ ","^5","~$kee-frame.core/reg-event-fx","^Q","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DFB122E\\kee_frame\\core.cljc","^R",53,"^S",1,"^T",53,"^U",18,"^P",["^ ","^Q","C:\\Users\\JaceMaverick\\.cljs\\.aot_cache\\1.11.60\\DFB122E\\kee_frame\\core.cljc","^R",53,"^S",6,"^T",53,"^U",18]]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","~$s","^=","^=","^=","^<","^="],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:debug-config","~:routes","~:screen","~:router","~:app-db-spec","~:route-change-event","~:hash-routing?","~:global-interceptors","~:chain-links","~:process-route","~:debug?","~:scroll","~:not-found","~:id","~:log-spec-error","~:root-component","~:kee-frame.spec/start-options","~:log","~:kee-frame.spec/controller","~:initial-db"]],"~:order",["^23","^24","^25","^26","^27","^28","^29","^2:","^2;","^2<","^2=","^2>","^2?","^2A","^2B","^2D","^2F","^2C","^2@","^2E"]],"^Z",null,"~:as-aliases",["^ "]]